name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '.devcontainer/**'
      - '.vscode/**'
      - 'LICENSE'
      - '*.gitattributes'
      - '*.gitmodules'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '.devcontainer/**'
      - '.vscode/**'
      - 'LICENSE'
      - '*.gitattributes'
      - '*.gitmodules'
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  id-token: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '9'

jobs:
  # ==========================================
  # SMART MATRIX GENERATION
  # ==========================================
  matrix-generator:
    name: Generate Test Matrix
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.matrix.outputs.matrix }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🧮 Generate smart matrix
        id: matrix
        uses: ./.github/actions/smart-matrix
        with:
          full-matrix: ${{ github.event_name == 'workflow_dispatch' }}

  # ==========================================
  # QUALITY CHECKS
  # ==========================================
  quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm
        with:
          node-version: ${{ env.NODE_VERSION }}
          pnpm-version: ${{ env.PNPM_VERSION }}

      - name: 🧠 Smart cache management
        uses: ./.github/actions/smart-cache
        with:
          cache-key-suffix: '-quality'

      - name: 🔍 Lint code
        run: pnpm run lint

      - name: 🎨 Check formatting
        run: pnpm run format --check || (echo "Code is not formatted properly. Run 'pnpm run format' to fix." && exit 1)

      - name: 🏗️ Optimized build
        uses: ./.github/actions/optimized-build

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}
          path: dist/
          retention-days: 7

  # ==========================================
  # TESTING
  # ==========================================
  test:
    name: Tests (Node ${{ matrix.node-version }})
    runs-on: ${{ matrix.os }}
    needs: [matrix-generator, quality]
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.matrix-generator.outputs.matrix) }}

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm
        with:
          node-version: ${{ matrix.node-version }}
          pnpm-version: ${{ env.PNPM_VERSION }}

      - name: 🧠 Smart cache management
        uses: ./.github/actions/smart-cache
        with:
          cache-key-suffix: '-test-${{ matrix.node-version }}'

      - name: 🎭 Setup Playwright
        uses: ./.github/actions/setup-playwright

      - name: 🧪 Run tests with coverage
        run: |
          echo "🔍 Running tests on Node.js ${{ matrix.node-version }} (${matrix.os})"
          if [[ "${{ matrix.node-version }}" == "20" && "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            echo "🔍 Running tests with coverage on primary matrix"
            pnpm run test:coverage
          else
            echo "🧪 Running tests without coverage on secondary matrix"
            pnpm test
          fi

      - name: 📊 Upload coverage to Codecov
        if: matrix.node-version == '20' && matrix.os == 'ubuntu-latest'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: 📤 Upload coverage artifacts
        if: matrix.node-version == '20' && matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report-${{ github.sha }}
          path: coverage/
          retention-days: 7

  # ==========================================
  # EXAMPLES VALIDATION (PARALLEL)
  # ==========================================
  examples:
    name: Example (${{ matrix.example }})
    runs-on: ubuntu-latest
    needs: [quality]
    strategy:
      fail-fast: false
      matrix:
        example: ['news', 'products']

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm
        with:
          node-version: ${{ env.NODE_VERSION }}
          pnpm-version: ${{ env.PNPM_VERSION }}

      - name: 🧠 Smart cache management
        uses: ./.github/actions/smart-cache
        with:
          cache-key-suffix: '-examples'

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}
          path: dist/

      - name: 🎭 Setup Playwright
        uses: ./.github/actions/setup-playwright

      - name: 🚀 Test example
        run: |
          case "${{ matrix.example }}" in
            "news")
              echo "🗞️ Testing news scraper example"
              timeout 30s pnpm run example:news
              ;;
            "products")
              echo "🛍️ Testing product scraper example"
              timeout 30s pnpm run example:products "test"
              ;;
          esac

      - name: 📊 Example execution summary
        if: always()
        run: |
          if [ $? -eq 0 ]; then
            echo "✅ Example '${{ matrix.example }}' executed successfully"
          else
            echo "❌ Example '${{ matrix.example }}' failed or timed out"
          fi

  # ==========================================
  # DOCUMENTATION
  # ==========================================
  docs:
    name: Generate Documentation
    runs-on: ubuntu-latest
    needs: [quality, test]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm
        with:
          node-version: ${{ env.NODE_VERSION }}
          pnpm-version: ${{ env.PNPM_VERSION }}

      - name: 🧠 Smart cache management
        uses: ./.github/actions/smart-cache
        with:
          cache-key-suffix: '-docs'

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}
          path: dist/

      - name: 📥 Download coverage artifacts
        uses: actions/download-artifact@v4
        with:
          name: coverage-report-${{ github.sha }}
          path: coverage/
        continue-on-error: true

      - name: 📚 Generate comprehensive documentation
        uses: ./.github/actions/generate-docs

      - name: 🌐 Deploy to GitHub Pages (main only)
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs
          destination_dir: .
          keep_files: false
          commit_message: 'docs: update documentation [skip ci]'

  # ==========================================
  # SECURITY AUDIT (PARALLEL)
  # ==========================================
  security:
    name: Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js and pnpm
        uses: ./.github/actions/setup-node-pnpm
        with:
          node-version: ${{ env.NODE_VERSION }}
          pnpm-version: ${{ env.PNPM_VERSION }}

      - name: 🧠 Smart cache management
        uses: ./.github/actions/smart-cache
        with:
          cache-key-suffix: '-security'
          enable-build-cache: 'false'

      - name: 🔒 Run security audit
        run: pnpm audit --audit-level high
        continue-on-error: true

      - name: 🔍 Initialize CodeQL Analysis
        uses: github/codeql-action/init@v3
        with:
          languages: typescript, javascript

      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # ==========================================
  # RELEASE (main branch only)
  # ==========================================
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [quality, test, examples, docs, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔧 Setup Node.js with npm registry
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: 🧠 Smart cache management
        uses: ./.github/actions/smart-cache
        with:
          cache-key-suffix: '-release'

      - name: 📥 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}
          path: dist/

      - name: 📥 Download documentation
        uses: actions/download-artifact@v4
        with:
          name: documentation
          path: docs/

      - name: 🚀 Dual Registry Publication
        uses: ./.github/actions/dual-registry-publisher
        with:
          npm-token: ${{ secrets.NPM_TOKEN }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
          package-scope: '@devalexanderdaza'
          dry-run: false

  # ==========================================
  # NOTIFICATION & ANALYTICS
  # ==========================================
  notify:
    name: Pipeline Analytics
    runs-on: ubuntu-latest
    needs: [matrix-generator, quality, test, examples, docs, security, release]
    if: always()

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: � Smart notifications and analytics
        uses: ./.github/actions/smart-notifications
        with:
          status: ${{ contains(needs.*.result, 'failure') && 'failure' || 'success' }}
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: � Performance analysis (on main)
        if: github.ref == 'refs/heads/main'
        run: |
          echo "🔍 Running advanced CI/CD analytics..."

          # This could be enhanced to store metrics in a database
          # or send to monitoring systems like DataDog, New Relic, etc.

          echo "📊 Pipeline completed for main branch"
          echo "🚀 All optimizations are active and working"
