name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '.devcontainer/**'
      - '.vscode/**'
      - 'LICENSE'
      - '*.gitattributes'
      - '*.gitmodules'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '.devcontainer/**'
      - '.vscode/**'
      - 'LICENSE'
      - '*.gitattributes'
      - '*.gitmodules'
  workflow_dispatch:

permissions:
  contents: read
  packages: write
  id-token: write
  security-events: write

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '20'
  PNPM_VERSION: '9'

jobs:
  # ==========================================
  # QUALITY CHECKS
  # ==========================================
  quality:
    name: Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: 🔍 Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: 💾 Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 📥 Install dependencies
        run: |
          cp .npmrc.ci .npmrc
          pnpm install --frozen-lockfile
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔍 Lint code
        run: pnpm run lint

      - name: 🎨 Check formatting
        run: |
          if ! pnpm run format:check; then
            echo "❌ Code is not formatted properly. Run 'pnpm run format' to fix."
            exit 1
          fi

      - name: 🏗️ Build project
        run: pnpm run build

      - name: 📤 Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}
          path: dist/
          retention-days: 7

  # ==========================================
  # TESTING
  # ==========================================
  test:
    name: Tests (Node ${{ matrix.node-version }})
    runs-on: ${{ matrix.os }}
    needs: [quality]
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        node-version: ['20', '22']
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - node-version: '20'
            os: ubuntu-latest
            coverage: true

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          registry-url: 'https://registry.npmjs.org'

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: 🔍 Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: 💾 Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 📥 Install dependencies
        run: |
          cp .npmrc.ci .npmrc
          pnpm install --frozen-lockfile
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 🎭 Install Playwright browsers
        run: pnpm exec playwright install --with-deps chromium
        if: matrix.coverage

      - name: 🧪 Run tests with coverage
        if: matrix.coverage
        run: pnpm run test:coverage

      - name: 🧪 Run tests
        if: '!matrix.coverage'
        run: pnpm run test

      - name: 📊 Upload coverage to Codecov
        if: matrix.coverage
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/lcov.info
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: 📤 Upload coverage artifacts
        if: matrix.coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage/
          retention-days: 7

  # ==========================================
  # EXAMPLES VALIDATION
  # ==========================================
  examples:
    name: Example (${{ matrix.example }})
    runs-on: ubuntu-latest
    needs: [quality]
    strategy:
      fail-fast: false
      matrix:
        example: ['news-scraper', 'advanced-product-scraper']

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: 📥 Install dependencies
        run: |
          cp .npmrc.ci .npmrc
          pnpm install --frozen-lockfile
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 🎭 Install Playwright browsers
        run: pnpm exec playwright install --with-deps chromium

      - name: 🚀 Run example
        run: timeout 30s pnpm exec tsx examples/${{ matrix.example }}.ts || exit 0

  # ==========================================
  # SECURITY AUDIT
  # ==========================================
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    needs: [quality]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: 📥 Install dependencies
        run: |
          cp .npmrc.ci .npmrc
          pnpm install --frozen-lockfile
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔒 Run security audit
        run: pnpm audit --audit-level moderate
        continue-on-error: true

      - name: 🔍 Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript

      - name: 🏗️ Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: 🔍 Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "security"
          output: "results.sarif"

  # ==========================================
  # DOCUMENTATION
  # ==========================================

  docs:
    name: Generate Documentation
    runs-on: ubuntu-latest
    needs: [quality]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: 📥 Install dependencies
        run: |
          cp .npmrc.ci .npmrc
          pnpm install
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📚 Generate documentation
        run: pnpm run docs:clean && pnpm run docs:build

      - name: 📤 Upload documentation artifacts
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: docs/
          retention-days: 30

      - name: 🚀 Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        if: github.ref == 'refs/heads/main'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs

  # ==========================================
  # RELEASE
  # ==========================================
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [quality, test, examples, security]
    if: github.ref == 'refs/heads/main'

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          registry-url: 'https://registry.npmjs.org'

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v3
        with:
          version: ${{ env.PNPM_VERSION }}
          run_install: false

      - name: 📥 Install dependencies
        run: |
          cp .npmrc.ci .npmrc
          pnpm install --frozen-lockfile
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 📦 Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}
          path: dist/

      - name: 🚀 Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: pnpm exec semantic-release
